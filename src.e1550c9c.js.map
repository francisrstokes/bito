{"version":3,"sources":["node_modules/microcan-fp/dist/microcan.js","src/index.js"],"names":["microcan","require","w","h","lerp","a","b","t","mapRange","fa","fb","ta","tb","x","clamp","min","max","MIN_FREQ","MAX_FREQ","inputEl","document","getElementById","canvas","ctx","getContext","audioCtx","AudioContext","gainNode","createGain","connect","destination","oscillator","createOscillator","frequency","setValueAtTime","currentTime","gain","start","Object","getOwnPropertyNames","Math","forEach","prop","window","T","n","location","hash","value","decodeURIComponent","slice","updateFn","Function","addEventListener","e","key","target","length","preventDefault","escapedFn","encodeURIComponent","bars","barSize","beatSize","mc","rect","size","position","drawShape","cellIndex","i","update","background","noFill","stroke","currentBar","floor","currentBeat","bar","y","strokeWeight","beat","push","pop","Number","isNaN","isFinite","clamped","freq","requestAnimationFrame"],"mappings":";;;AAyUA,IAAA,EAAA,EAAA,UAAA,IAzUA,SAAA,EAAA,GACA,iBAAA,SAAA,oBAAA,OAAA,OAAA,QAAA,IACA,mBAAA,GAAA,EAAA,IAAA,EAAA,GACA,EAAA,SAAA,IAHA,CAIA,KAAA,WAAA,aAEA,MAAA,EAAA,CAAA,EAAA,KACA,MAAA,EAAA,IAAA,KACA,GAAA,EAAA,QAAA,EAAA,OACA,OAAA,KAAA,GAEA,MAAA,EAAA,IAAA,IAAA,KAAA,KAAA,GAMA,OAJA,IACA,EAAA,SAAA,WAAA,OAAA,IAGA,GAKA,OAHA,IACA,EAAA,SAAA,WAAA,OAAA,IAEA,GAEA,EAAA,EAAA,KAAA,GAEA,EAAA,CAAA,EAAA,EAAA,EAAA,GA4SA,OA1SA,SAAA,GAAA,EAAA,IACA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,MAAA,EAAA,GACA,IAAA,EAAA,CAAA,KAAA,GAAA,KAAA,QAAA,SAAA,IACA,EAAA,CAAA,EAAA,EAAA,EAAA,GACA,EAAA,CAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAoDA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,EAAA,IAAA,KAAA,OAAA,IAEA,EAAA,KAAA,EACA,EAAA,SAAA,EACA,EAAA,KAAA,EAIA,SAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,kBAAA,MAAA,MAAA,MAAA,KACA,EAAA,CAAA,EAAA,EAAA,EAAA,GAGA,SAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,oBAAA,MAAA,MAAA,MAAA,KACA,EAAA,CAAA,EAAA,EAAA,EAAA,GAaA,SAAA,EAAA,GACA,EAAA,YAAA,GACA,EAAA,EAeA,SAAA,EAAA,GACA,EAAA,UAAA,EAIA,SAAA,EAAA,GACA,MAAA,CACA,KAAA,UACA,OAAA,GAxGA,EAAA,OAAA,MAAA,EACA,EAAA,OAAA,OAAA,EA0GA,MAAA,EAAA,EAAA,SAAA,EAAA,GAAA,EAAA,IACA,MAAA,EAAA,EAAA,EAKA,OAAA,EAJA,MAAA,KAAA,MAAA,GAAA,CAAA,EAAA,IAAA,CACA,EAAA,KAAA,IAAA,EAAA,GAAA,EACA,EAAA,KAAA,IAAA,EAAA,GAAA,MAGA,kDAEA,EAAA,EAAA,SAAA,EAAA,GAAA,EAAA,IACA,MAAA,EAAA,EAAA,GAAA,GACA,GAAA,EAAA,GACA,KAAA,IAAA,EAAA,GAEA,EAAA,EAAA,EAAA,EAKA,OAAA,EAJA,MAAA,KAAA,MAAA,GAAA,CAAA,EAAA,IAAA,CACA,EAAA,KAAA,IAAA,EAAA,GAAA,EACA,EAAA,KAAA,IAAA,EAAA,GAAA,MAGA,4DAEA,EAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IACA,MAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,OAAA,EAAA,CACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,MAEA,4CAEA,EAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,CAAA,EAAA,GAAA,IACA,8CAEA,EAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,CAAA,EAAA,KACA,8BAEA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,CACA,KAAA,UACA,SAAA,EACA,OAAA,EACA,MAAA,EACA,SAAA,IAEA,8EAEA,EAAA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,IACA,4DAEA,EAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IACA,0CAEA,EAAA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IACA,qDAGA,SAAA,EAAA,GACA,MAAA,SAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,GAAA,EACA,EAAA,YACA,EAAA,WAAA,KAAA,EAAA,KAAA,GAAA,GACA,EAAA,SACA,EAAA,OACA,EAAA,YAWA,SAAA,EAAA,GACA,MAAA,OAAA,GAAA,EACA,EAAA,YACA,EAAA,UAAA,EAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,UAAA,EAAA,IAEA,EAAA,UAAA,EAAA,IACA,EAAA,YACA,EAAA,SACA,EAAA,OAmBA,MAAA,EAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,OAAA,IAAA,KACA,4CAEA,EAAA,EAAA,SAAA,EAAA,GACA,MAAA,OAAA,EAAA,MAAA,EAAA,SAAA,GAAA,EACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KACA,6CAEA,EAAA,EAAA,SAAA,EAAA,GACA,MAAA,OAAA,EAAA,MAAA,EAAA,SAAA,GAAA,EACA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,6CAEA,EAAA,EAAA,SAAA,EAAA,GACA,MAAA,OAAA,EAAA,SAAA,EAAA,SAAA,GAAA,EACA,OAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IACA,0CAEA,EAAA,EAAA,SAAA,EAAA,GACA,MAAA,MAAA,EAAA,SAAA,EAAA,SAAA,GAAA,EACA,OAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IACA,2CAGA,MAAA,CACA,eAxNA,UAAA,EAAA,IACA,EAAA,EACA,EAAA,EACA,EAAA,OAAA,MAAA,EACA,EAAA,OAAA,OAAA,GAqNA,OAlNA,SAAA,GACA,EAAA,GAkNA,KAAA,EACA,OAAA,EACA,SAlLA,WACA,EAAA,GACA,EAAA,GAiLA,OA9KA,WACA,EAAA,GACA,EAAA,GA6KA,KAAA,EACA,OAtKA,WACA,EAAA,YAAA,IACA,EAAA,IAqKA,WAlKA,UAAA,EAAA,EAAA,EAAA,IACA,MAAA,EAAA,EAAA,UACA,EAAA,kBAAA,MAAA,MAAA,MAAA,KACA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,UAAA,GA+JA,aAAA,EACA,QAAA,EACA,KAAA,EACA,YAAA,EACA,KAAA,EACA,OAAA,EACA,KAAA,EACA,YAAA,EACA,QAAA,EACA,OAAA,EACA,IAAA,EACA,YAAA,EACA,QArFA,SAAA,GACA,MAAA,OAAA,EAAA,MAAA,EAAA,SAAA,GAAA,EACA,EAAA,YACA,EAAA,OAAA,EAAA,EAAA,MAAA,GAAA,GACA,EAAA,SACA,EAAA,OACA,EAAA,aAgFA,YAAA,EACA,UAzDA,SAAA,GACA,OAAA,EAAA,MACA,IAAA,UAAA,OAAA,EAAA,GACA,IAAA,UAAA,OAAA,EAAA,KAuDA,SAnEA,SAAA,GACA,MAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EACA,EAAA,YACA,EAAA,OAAA,EAAA,GACA,EAAA,OAAA,EAAA,GACA,EAAA,SACA,EAAA,aA8DA,WAAA,EACA,YAAA,EACA,YAAA,EACA,SAAA,EACA,UAAA,EAEA,KA3OA,SAAA,EAAA,GACA,EAAA,SAAA,KAAA,GACA,EAAA,WAAA,KAAA,IA0OA,aAvOA,SAAA,EAAA,GACA,MAAA,EAAA,EAAA,YAAA,GACA,EAAA,SAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,EAAA,GAAA,EAAA,KAAA,GACA,EAAA,WAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,EAAA,GAAA,EAAA,KAAA,IAqOA,QAAA,EACA,KAAA,EACA,YAAA,EACA,UAAA,EACA,WAAA,EACA,KAtRA,WACA,EAAA,KAAA,CACA,KAAA,EACA,YAAA,EACA,UAAA,EACA,WAAA,EACA,aAAA,EAAA,aAiRA,IA7QA,WACA,MAAA,EAAA,EAAA,MACA,IAAA,EACA,MAAA,IAAA,MAAA,mBAGA,EAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,UACA,EAAA,EAAA,aACA,EAAA,EAAA,WACA,EAAA,EAAA,YACA,EAAA,EAAA,eAoQA,IAAA;;AClUA,IAAMA,EAAWC,QAAQ,eAEnBC,EAAI,IACJC,EAAI,IAEJC,EAAO,SAACC,EAAGC,EAAGC,GAAMF,OAAAA,GAAKC,EAAID,GAAKE,GAClCC,EAAW,SAACC,EAAIC,EAAIC,EAAIC,EAAIC,GAAMT,OAAAA,EAAKO,EAAIC,GAAKC,EAAIJ,IAAOC,EAAKD,KAChEK,EAAQ,SAACC,EAAKC,EAAKH,GACnBA,OAAAA,EAAIG,EAAYA,EAChBH,EAAIE,EAAYA,EACbF,GAGHI,EAAW,IACXC,EAAW,IAEXC,EAAUC,SAASC,eAAe,aAClCC,EAASF,SAASC,eAAe,QACjCE,EAAMD,EAAOE,WAAW,MAExBC,EAAW,IAAIC,aAEfC,EAAWF,EAASG,aAC1BD,EAASE,QAAQJ,EAASK,aAE1B,IAAMC,EAAaN,EAASO,mBAC5BD,EAAWF,QAAQF,GAEnBI,EAAWE,UAAUC,eAAe,IAAOT,EAASU,aACpDR,EAASS,KAAKF,eAAe,GAAKT,EAASU,aAE3CJ,EAAWM,QAGXC,OAAOC,oBAAoBC,MAAMC,QAAQ,SAAAC,GACvCC,OAAOD,GAAQF,KAAKE,KAItBC,OAAOC,EAAI,SAAAC,GAAKrC,OAAAA,EAASS,EAAUC,GAAW,EAAG,EAAGJ,EAAMG,EAAUC,EAAU,IAAO,KAAA,IAAA,SAAU2B,MAE3FC,SAASC,OACT5B,EAAQ6B,MAAQC,mBAAmBH,SAASC,KAAKG,MAAM,EAAG,MAU9D,IAAIC,EAAW,IAAIC,SAAS,IAAK,IAAK,IAAK,IAAK,UAAYjC,EAAQ6B,OAEpE7B,EAAQkC,iBAAiB,UAAW,SAAAC,GAC9BA,GAAU,cAAVA,EAAEC,IACG,OAAA,EAGLD,GAA0B,KAA1BA,EAAEE,OAAOR,MAAMS,OAEV,OADPH,EAAEI,kBACK,EAGLJ,GAAU,UAAVA,EAAEC,IAAiB,CACrBJ,EAAW,IAAIC,SAAS,IAAK,IAAK,IAAK,IAAK,UAAYE,EAAEE,OAAOR,OAC3DW,IAAAA,EAAYC,mBAAmBN,EAAEE,OAAOR,OAC9CL,OAAOG,SAASC,KAAOY,KAI3B,IAAME,EAAO,GACPC,EAAU5D,EAAI2D,EAAO,EACrBE,EAAqB,EAAVD,EAEXE,EAAKhE,EAASuB,EAAK,CAACrB,EAAGC,IACvB8D,EAAO,SAACC,EAAMC,GAAaH,OAAAA,EAAGI,UAAUJ,EAAGC,KAAKC,EAAMC,KAExDE,EAAY,EACZC,EAAI,EAEFC,EAAS,SAATA,IACJP,EAAGQ,WAAW,CAAC,EAAG,EAAG,EAAG,IACxBR,EAAGS,SACHT,EAAGU,OAAO,CAAC,IAAK,IAAK,IAAK,IAKrB,IAHCC,IAAAA,EAAanC,KAAKoC,MAAMP,EAAY,GACpCQ,EAAcR,EAAY,EAEvBS,EAAM,EAAGA,EAAMjB,EAAMiB,IAAO,CAC7BC,IAAAA,EAAIH,MAAME,EAAM,GAAKf,EAE3BC,EAAGgB,aAAa,GAChBf,EAAK,CAAU,EAATF,EAAW,IAAe,IAATA,GAAgB,CAAU,EAATA,EAAYgB,EAAEhB,EAAS,IAC/DE,EAAK,CAAU,EAATF,EAAW,IAAe,IAATA,GAAgB,CAAU,EAATA,EAAYgB,EAAEhB,EAAS,IAE/DC,EAAGgB,aAAa,IACX,IAAA,IAAIC,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAC7BpE,IAAAA,EAAKiE,EAAM,GAAM,EACnBG,EAAOlB,EACI,EAAXA,EAAekB,EAAOlB,EAC1BE,EAAK,CAACF,EAAUA,GAAW,CAAClD,EAAEkD,EAAS,EAAGgB,EAAEhB,EAAS,IAEjDe,IAAQH,GAAcM,IAASJ,IACjCb,EAAGkB,OACHlB,EAAGgB,aAAa,GAChBhB,EAAGU,OAAO,CAAC,IAAM,GAAM,GAAM,IAC7BT,EAAK,CAAU,GAATF,EAAuB,GAATA,GAAe,CAAClD,EAAEkD,EAAS,EAAGgB,EAAEhB,EAAS,IAC7DC,EAAGmB,QAKLb,GAAAA,EAAI,IAAO,EAAG,CACZtB,IAAAA,EACA,IACFA,EAAQG,EAAS1B,EAASU,YAAakC,EAAWM,EAAYE,GAC9D,MAAOvB,IAEY,iBAAVN,IAAsBoC,OAAOC,MAAMrC,IAAWoC,OAAOE,SAAStC,KACvEA,EAAQ,GAGJuC,IAAAA,EAAUzE,GAAO,EAAG,EAAGkC,GACvBwC,EAAOpF,EAAKa,EAAUC,GAAWqE,EAAU,GAAK,GACtDxD,EAAWE,UAAUC,eAAesD,EAAM/D,EAASU,aAEnDkC,GAAaA,EAAY,GAAK,GAGhCC,IAEAmB,sBAAsBlB,IAGxBA","file":"src.e1550c9c.js","sourceRoot":"..","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.microcan = factory());\n}(this, (function () { 'use strict';\n\n  const curry = (fn, toStringMessage) => {\n    const curried = (...args) => {\n      if (args.length >= fn.length) {\n        return fn(...args);\n      }\n      const nextFn = (...argsNext) => curried(...args, ...argsNext);\n\n      if (toStringMessage) {\n        nextFn.toString = function toString() { return toStringMessage; };\n      }\n\n      return nextFn;\n    };\n    if (toStringMessage) {\n      curried.toString = function toString() { return toStringMessage; };\n    }\n    return curried;\n  };\n  const TAU = Math.PI * 2;\n\n  const TRANSPARENT = [0,0,0,0];\n\n  function microcan(canvasCtx, [w, h]) {\n    let width = w;\n    let height = h;\n    let ctx = canvasCtx;\n\n    const stack = [];\n    let font = {size:14, font: 'Arial', modifier: ''};\n    let strokeColor = [0,0,0,1];\n    let fillColor = [0,0,0,1];\n    let dashVector = [];\n\n    ctx.canvas.width = w;\n    ctx.canvas.height = h;\n\n    function push() {\n      stack.push({\n        font,\n        strokeColor,\n        fillColor,\n        dashVector,\n        strokeWeight: ctx.lineWidth\n      });\n    }\n\n    function pop() {\n      const out = stack.pop();\n      if (!out) {\n        throw new Error('No stack to pop');\n      }\n\n      setFont(out.font.size, out.font.font, out.font.modifier);\n      stroke(out.strokeColor);\n      fill(out.fillColor);\n      dash(out.dashVector);\n      strokeWeight(out.strokeWeight);\n    }\n\n    // State functions\n    function setWidthHeight([w, h]) {\n      width = w;\n      height = h;\n      ctx.canvas.width = w;\n      ctx.canvas.height = h;\n    }\n\n    function setCtx(canvasCtx) {\n      ctx = canvasCtx;\n    }\n\n\n    function text(text, pos) {\n      ctx.fillText(text, ...pos);\n      ctx.strokeText(text, ...pos);\n    }\n\n    function centeredText(text, pos) {\n      const size = ctx.measureText(text);\n      ctx.fillText(text, pos[0] - size.width / 2, pos[1] + font.size / 4);\n      ctx.strokeText(text, pos[0] - size.width / 2, pos[1] + font.size / 4);\n    }\n\n    function setFont(size, _font, modifier) {\n      ctx.font = `${modifier ? modifier + ' ' : ''}${size}px ${font}`;\n\n      font.font = font;\n      font.modifier = modifier;\n      font.size = size;\n    }\n\n    // Drawing modifier functions\n    function fill([r, g, b, a]) {\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      fillColor = [r, g, b, a];\n    }\n\n    function stroke([r, g, b, a]) {\n      ctx.strokeStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      strokeColor = [r, g, b, a];\n    }\n\n    function noStroke() {\n      stroke(TRANSPARENT);\n      strokeColor = TRANSPARENT;\n    }\n\n    function noFill() {\n      fill(TRANSPARENT);\n      fillColor = TRANSPARENT;\n    }\n\n    function dash(widthSpacingVector) {\n      ctx.setLineDash(widthSpacingVector);\n      dashVector = widthSpacingVector;\n    }\n\n    function noDash() {\n      ctx.setLineDash([]);\n      dashVector = [];\n    }\n\n    function background([r, g, b, a]) {\n      const oldColor = ctx.fillStyle;\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      ctx.fillRect(0, 0, width, height);\n      ctx.fillStyle = oldColor;\n    }\n\n    function strokeWeight(weight) {\n      ctx.lineWidth = weight;\n    }\n\n    // Shape descriptor functions\n    function polygon(points) {\n      return {\n        type: 'polygon',\n        points\n      };\n    }\n    const poly = curry(function poly(n, radius, [x, y]) {\n      const a = TAU / n;\n      const points = Array.from(Array(n), (_, i) => [\n        x + Math.cos(a * i) * radius,\n        y + Math.sin(a * i) * radius\n      ]);\n      return polygon(points);\n    }, 'poly(n:Number, radius:Number, position:Vector)');\n\n    const alignedPoly = curry(function alignedPoly(n, radius, [x, y]) {\n      const alignment = (n % 2 === 0)\n        ? -TAU/(n*2)\n        : Math.PI/(n*2);\n\n      const a = (TAU / n) + alignment;\n      const points = Array.from(Array(n), (_, i) => [\n        x + Math.cos(a * i) * radius,\n        y + Math.sin(a * i) * radius\n      ]);\n      return polygon(points);\n    }, 'alignedPolygon(n:Number, radius:Number, position:Vector)');\n\n    const rect = curry(function rect([w, h], [x, y]) {\n      const w2 = w/2;\n      const h2 = h/2;\n      return polygon([\n        [x - w2, y - h2],\n        [x + w2, y - h2],\n        [x + w2, y + h2],\n        [x - w2, y + h2],\n      ]);\n    }, 'rect(dimensions:Vector, position:Vector)');\n\n    const square = curry(function square(sideLength, position) {\n      return rect([sideLength, sideLength], position);\n    }, 'square(sideLength:Number, position:Vector)');\n\n    const line = curry(function line(p1, p2) {\n      return polygon([p1, p2]);\n    }, 'line(v1:Vector, v2:Vector)');\n\n    const fullEllipse = curry(function fullEllipse(rotation, radiusV, angleV, positionV) {\n      return {\n        type: 'ellipse',\n        rotation,\n        radius: radiusV,\n        angle: angleV,\n        position: positionV\n      };\n    }, 'fullEllipse(rotation:Number, radius:Vector, angle:Vector, position:Vector)');\n\n    const ellipse = curry(function ellipse(rotation, radiusV, positionV) {\n      return fullEllipse(rotation, radiusV, [0, TAU], positionV);\n    }, 'ellipse(rotation:Number, radius:Vector, position:Vector)');\n\n    const circle = curry(function circle(radius, positionV) {\n      return fullEllipse(0, [radius, radius], [0, TAU], positionV);\n    }, 'circle(radius:Number, position:Vector)');\n\n    const arc = curry(function arc(radius, angleV, positionV) {\n      return fullEllipse(0, [radius, radius], angleV, positionV);\n    }, 'arc(radius:Number, angle:Vector, position:Vector)');\n\n    // Drawing functions\n    function drawEllipse(shape) {\n      const {rotation, radius, angle, position} = shape;\n      ctx.beginPath();\n      ctx.ellipse(...position, ...radius, rotation, ...angle, false);\n      ctx.stroke();\n      ctx.fill();\n      ctx.closePath();\n    }\n    function drawArc(shape) {\n      const {radius, angle, position} = shape;\n      ctx.beginPath();\n      ctx.arc(...position, radius[0], ...angle, false);\n      ctx.stroke();\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    function drawPolygon(shape) {\n      const {points} = shape;\n      ctx.beginPath();\n      ctx.moveTo(...points[0]);\n      for (let i = 1; i < points.length; i++) {\n        ctx.lineTo(...points[i]);\n      }\n      ctx.lineTo(...points[0]);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.fill();\n    }\n    function drawLine(shape) {\n      const {points: [[x1, y1], [x2, y2]]} = shape;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    function drawShape(shape) {\n      switch (shape.type) {\n        case 'ellipse': return drawEllipse(shape);\n        case 'polygon': return drawPolygon(shape);\n      }\n    }\n\n    // Maps\n    const mapPolygon = curry(function liftPolygon(fn, polygonShape) {\n      return polygon(polygonShape.points.map(fn));\n    }, 'mapPolygon(fn:Function, polygon:Polygon)');\n\n    const mapPosition = curry(function mapPosition(fn, e) {\n      const {radius, angle, rotation} = e;\n      return fullEllipse(rotation, radius, angle, fn(e));\n    }, 'mapPosition(fn:Function, ellipse:Ellipse)');\n\n    const mapRotation = curry(function mapRotation(fn, e) {\n      const {radius, angle, position} = e;\n      return fullEllipse(fn(e), radius, angle, position);\n    }, 'mapRotation(fn:Function, ellipse:Ellipse)');\n\n    const mapAngle = curry(function mapAngle(fn, e) {\n      const {radius, position, rotation} = e;\n      return fullEllipse(rotation, radius, fn(e), position);\n    }, 'mapAngle(fn:Function, ellipse:Ellipse)');\n\n    const mapRadius = curry(function mapRadius(fn, e) {\n      const {angle, position, rotation} = e;\n      return fullEllipse(rotation, fn(e), angle, position);\n    }, 'mapRadius(fn:Function, ellipse:Ellipse)');\n\n    // Output\n    return {\n      setWidthHeight,\n      setCtx,\n      fill,\n      stroke,\n      noStroke,\n      noFill,\n      dash,\n      noDash,\n      background,\n      strokeWeight,\n      polygon,\n      poly,\n      alignedPoly,\n      rect,\n      square,\n      line,\n      fullEllipse,\n      ellipse,\n      circle,\n      arc,\n      drawEllipse,\n      drawArc,\n      drawPolygon,\n      drawShape,\n      drawLine,\n      mapPolygon,\n      mapPosition,\n      mapRotation,\n      mapAngle,\n      mapRadius,\n\n      text,\n      centeredText,\n      setFont,\n      font,\n      strokeColor,\n      fillColor,\n      dashVector,\n      push,\n      pop,\n      ctx\n    };\n  }\n\n  return microcan;\n\n})));\n","const microcan = require('microcan-fp');\n\nconst w = 500;\nconst h = 500;\n\nconst lerp = (a, b, t) => a + (b - a) * t;\nconst mapRange = (fa, fb, ta, tb, x) => lerp(ta, tb, (x - fa) / (fb - fa));\nconst clamp = (min, max, x) => {\n  if (x > max) return max;\n  if (x < min) return min;\n  return x;\n};\n\nconst MIN_FREQ = 220;\nconst MAX_FREQ = 880;\n\nconst inputEl = document.getElementById('codeInput');\nconst canvas = document.getElementById('main');\nconst ctx = canvas.getContext('2d');\n\nconst audioCtx = new AudioContext();\n\nconst gainNode = audioCtx.createGain();\ngainNode.connect(audioCtx.destination);\n\nconst oscillator = audioCtx.createOscillator();\noscillator.connect(gainNode);\n\noscillator.frequency.setValueAtTime(880.0, audioCtx.currentTime);\ngainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);\n\noscillator.start();\n\n// Inject math functions into global scope\nObject.getOwnPropertyNames(Math).forEach(prop => {\n  window[prop] = Math[prop];\n});\n\n// Inject the tone function\nwindow.T = n => mapRange(MIN_FREQ, MAX_FREQ, -1, 1, clamp(MIN_FREQ, MAX_FREQ, 440 * (1.059463**n)));\n\nif (location.hash) {\n    inputEl.value = decodeURIComponent(location.hash.slice(1, 32));\n}\n\n// b is the bar number\n// i is the index of the cell\n// t is in seconds\n// o is the offset in the bar (the beat)\n//\n// function should return a number from -1 to 1\n// which maps to frequencies from 220Hz to 880Hz (A3 to A5)\nlet updateFn = new Function('b', 'i', 't', 'o', 'return ' + inputEl.value);\n\ninputEl.addEventListener('keydown', e => {\n  if (e.key === 'Backspace') {\n    return true;\n  }\n\n  if (e.target.value.length === 32) {\n    e.preventDefault();\n    return false;\n  }\n\n  if (e.key === 'Enter') {\n    updateFn = new Function('t', 'i', 'b', 'o', 'return ' + e.target.value);\n    const escapedFn = encodeURIComponent(e.target.value);\n    window.location.hash = escapedFn;\n  }\n});\n\nconst bars = 16;\nconst barSize = w / bars / 2;\nconst beatSize = barSize * 4;\n\nconst mc = microcan(ctx, [w, h]);\nconst rect = (size, position) => mc.drawShape(mc.rect(size, position));\n\nlet cellIndex = 0;\nlet i = 0;\n\nconst update = () => {\n  mc.background([0, 0, 0, 1]);\n  mc.noFill();\n  mc.stroke([255, 255, 255, 1]);\n\n  const currentBar = Math.floor(cellIndex / 4);\n  const currentBeat = cellIndex % 4;\n\n  for (let bar = 0; bar < bars; bar++) {\n    const y = floor(bar / 2) * beatSize;\n\n    mc.strokeWeight(6);\n    rect([beatSize*4*0.99, beatSize*0.99], [beatSize*2, y+beatSize/2]);\n    rect([beatSize*4*0.99, beatSize*0.99], [beatSize*6, y+beatSize/2]);\n\n    mc.strokeWeight(0.5);\n    for (let beat = 0; beat < 4; beat++) {\n      const x = (bar % 2 === 0)\n        ? beat * beatSize\n        : beatSize * 4 + beat * beatSize;\n      rect([beatSize, beatSize], [x+beatSize/2, y+beatSize/2]);\n\n      if (bar === currentBar && beat === currentBeat) {\n        mc.push();\n        mc.strokeWeight(8);\n        mc.stroke([0xff, 0x22, 0x44, 1]);\n        rect([beatSize*0.4, beatSize*0.4], [x+beatSize/2, y+beatSize/2]);\n        mc.pop();\n      }\n    }\n  }\n\n  if (i % 10 === 0) {\n    let value;\n    try {\n      value = updateFn(audioCtx.currentTime, cellIndex, currentBar, currentBeat);\n    } catch (e) {}\n\n    if (typeof value !== 'number' || Number.isNaN(value) || !Number.isFinite(value)) {\n      value = 0;\n    }\n\n    const clamped = clamp(-1, 1, value);\n    const freq = lerp(MIN_FREQ, MAX_FREQ, (clamped + 1) / 2);\n    oscillator.frequency.setValueAtTime(freq, audioCtx.currentTime);\n\n    cellIndex = (cellIndex + 1) % 64;\n  }\n\n  i++;\n\n  requestAnimationFrame(update);\n}\n\nupdate();\n"]}