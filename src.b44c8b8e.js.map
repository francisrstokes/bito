{"version":3,"sources":["node_modules/microcan-fp/dist/microcan.js","src/index.js"],"names":["microcan","require","CHAR_LIMIT","tutorial","code","lines","w","h","canvas","document","getElementById","ctx","getContext","mc","rect","size","position","drawShape","circle","r","drawEllipse","fill","noStroke","textH","Math","floor","font","textSize","measureText","run","waveTypes","inputEl","audioCtx","AudioContext","gainNode","createGain","connect","destination","oscillator","createOscillator","type","frequency","setValueAtTime","currentTime","gain","start","updateFn","Function","value","setBitoFunction","waveTypeIndex","escapedFn","encodeURIComponent","window","location","hash","commentEl","querySelector","tutorialPointer","addEventListener","tut","innerHTML","map","line","join","length","Object","getOwnPropertyNames","forEach","prop","T","b","n","decodeURIComponent","slice","inputClasses","classList","e","key","target","console","log","add","remove","bars","beatSize","cellIndex","i","noNote","lastValue","update","background","noFill","stroke","currentBar","currentBeat","NaN","skip","Number","isNaN","disconnect","Infinity","freq","orderCount","bar","y","push","pop","strokeWeight","beat","x","c","requestAnimationFrame","fillText","width","once"],"mappings":"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","file":"src.b44c8b8e.js","sourceRoot":"..","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.microcan = factory());\n}(this, (function () { 'use strict';\n\n  const curry = (fn, toStringMessage) => {\n    const curried = (...args) => {\n      if (args.length >= fn.length) {\n        return fn(...args);\n      }\n      const nextFn = (...argsNext) => curried(...args, ...argsNext);\n\n      if (toStringMessage) {\n        nextFn.toString = function toString() { return toStringMessage; };\n      }\n\n      return nextFn;\n    };\n    if (toStringMessage) {\n      curried.toString = function toString() { return toStringMessage; };\n    }\n    return curried;\n  };\n  const TAU = Math.PI * 2;\n\n  const TRANSPARENT = [0,0,0,0];\n\n  function microcan(canvasCtx, [w, h]) {\n    let width = w;\n    let height = h;\n    let ctx = canvasCtx;\n\n    const stack = [];\n    let font = {size:14, font: 'Arial', modifier: ''};\n    let strokeColor = [0,0,0,1];\n    let fillColor = [0,0,0,1];\n    let dashVector = [];\n\n    ctx.canvas.width = w;\n    ctx.canvas.height = h;\n\n    function push() {\n      stack.push({\n        font,\n        strokeColor,\n        fillColor,\n        dashVector,\n        strokeWeight: ctx.lineWidth\n      });\n    }\n\n    function pop() {\n      const out = stack.pop();\n      if (!out) {\n        throw new Error('No stack to pop');\n      }\n\n      setFont(out.font.size, out.font.font, out.font.modifier);\n      stroke(out.strokeColor);\n      fill(out.fillColor);\n      dash(out.dashVector);\n      strokeWeight(out.strokeWeight);\n    }\n\n    // State functions\n    function setWidthHeight([w, h]) {\n      width = w;\n      height = h;\n      ctx.canvas.width = w;\n      ctx.canvas.height = h;\n    }\n\n    function setCtx(canvasCtx) {\n      ctx = canvasCtx;\n    }\n\n\n    function text(text, pos) {\n      ctx.fillText(text, ...pos);\n      ctx.strokeText(text, ...pos);\n    }\n\n    function centeredText(text, pos) {\n      const size = ctx.measureText(text);\n      ctx.fillText(text, pos[0] - size.width / 2, pos[1] + font.size / 4);\n      ctx.strokeText(text, pos[0] - size.width / 2, pos[1] + font.size / 4);\n    }\n\n    function setFont(size, _font, modifier) {\n      ctx.font = `${modifier ? modifier + ' ' : ''}${size}px ${font}`;\n\n      font.font = font;\n      font.modifier = modifier;\n      font.size = size;\n    }\n\n    // Drawing modifier functions\n    function fill([r, g, b, a]) {\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      fillColor = [r, g, b, a];\n    }\n\n    function stroke([r, g, b, a]) {\n      ctx.strokeStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      strokeColor = [r, g, b, a];\n    }\n\n    function noStroke() {\n      stroke(TRANSPARENT);\n      strokeColor = TRANSPARENT;\n    }\n\n    function noFill() {\n      fill(TRANSPARENT);\n      fillColor = TRANSPARENT;\n    }\n\n    function dash(widthSpacingVector) {\n      ctx.setLineDash(widthSpacingVector);\n      dashVector = widthSpacingVector;\n    }\n\n    function noDash() {\n      ctx.setLineDash([]);\n      dashVector = [];\n    }\n\n    function background([r, g, b, a]) {\n      const oldColor = ctx.fillStyle;\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n      ctx.fillRect(0, 0, width, height);\n      ctx.fillStyle = oldColor;\n    }\n\n    function strokeWeight(weight) {\n      ctx.lineWidth = weight;\n    }\n\n    // Shape descriptor functions\n    function polygon(points) {\n      return {\n        type: 'polygon',\n        points\n      };\n    }\n    const poly = curry(function poly(n, radius, [x, y]) {\n      const a = TAU / n;\n      const points = Array.from(Array(n), (_, i) => [\n        x + Math.cos(a * i) * radius,\n        y + Math.sin(a * i) * radius\n      ]);\n      return polygon(points);\n    }, 'poly(n:Number, radius:Number, position:Vector)');\n\n    const alignedPoly = curry(function alignedPoly(n, radius, [x, y]) {\n      const alignment = (n % 2 === 0)\n        ? -TAU/(n*2)\n        : Math.PI/(n*2);\n\n      const a = (TAU / n) + alignment;\n      const points = Array.from(Array(n), (_, i) => [\n        x + Math.cos(a * i) * radius,\n        y + Math.sin(a * i) * radius\n      ]);\n      return polygon(points);\n    }, 'alignedPolygon(n:Number, radius:Number, position:Vector)');\n\n    const rect = curry(function rect([w, h], [x, y]) {\n      const w2 = w/2;\n      const h2 = h/2;\n      return polygon([\n        [x - w2, y - h2],\n        [x + w2, y - h2],\n        [x + w2, y + h2],\n        [x - w2, y + h2],\n      ]);\n    }, 'rect(dimensions:Vector, position:Vector)');\n\n    const square = curry(function square(sideLength, position) {\n      return rect([sideLength, sideLength], position);\n    }, 'square(sideLength:Number, position:Vector)');\n\n    const line = curry(function line(p1, p2) {\n      return polygon([p1, p2]);\n    }, 'line(v1:Vector, v2:Vector)');\n\n    const fullEllipse = curry(function fullEllipse(rotation, radiusV, angleV, positionV) {\n      return {\n        type: 'ellipse',\n        rotation,\n        radius: radiusV,\n        angle: angleV,\n        position: positionV\n      };\n    }, 'fullEllipse(rotation:Number, radius:Vector, angle:Vector, position:Vector)');\n\n    const ellipse = curry(function ellipse(rotation, radiusV, positionV) {\n      return fullEllipse(rotation, radiusV, [0, TAU], positionV);\n    }, 'ellipse(rotation:Number, radius:Vector, position:Vector)');\n\n    const circle = curry(function circle(radius, positionV) {\n      return fullEllipse(0, [radius, radius], [0, TAU], positionV);\n    }, 'circle(radius:Number, position:Vector)');\n\n    const arc = curry(function arc(radius, angleV, positionV) {\n      return fullEllipse(0, [radius, radius], angleV, positionV);\n    }, 'arc(radius:Number, angle:Vector, position:Vector)');\n\n    // Drawing functions\n    function drawEllipse(shape) {\n      const {rotation, radius, angle, position} = shape;\n      ctx.beginPath();\n      ctx.ellipse(...position, ...radius, rotation, ...angle, false);\n      ctx.stroke();\n      ctx.fill();\n      ctx.closePath();\n    }\n    function drawArc(shape) {\n      const {radius, angle, position} = shape;\n      ctx.beginPath();\n      ctx.arc(...position, radius[0], ...angle, false);\n      ctx.stroke();\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    function drawPolygon(shape) {\n      const {points} = shape;\n      ctx.beginPath();\n      ctx.moveTo(...points[0]);\n      for (let i = 1; i < points.length; i++) {\n        ctx.lineTo(...points[i]);\n      }\n      ctx.lineTo(...points[0]);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.fill();\n    }\n    function drawLine(shape) {\n      const {points: [[x1, y1], [x2, y2]]} = shape;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    function drawShape(shape) {\n      switch (shape.type) {\n        case 'ellipse': return drawEllipse(shape);\n        case 'polygon': return drawPolygon(shape);\n      }\n    }\n\n    // Maps\n    const mapPolygon = curry(function liftPolygon(fn, polygonShape) {\n      return polygon(polygonShape.points.map(fn));\n    }, 'mapPolygon(fn:Function, polygon:Polygon)');\n\n    const mapPosition = curry(function mapPosition(fn, e) {\n      const {radius, angle, rotation} = e;\n      return fullEllipse(rotation, radius, angle, fn(e));\n    }, 'mapPosition(fn:Function, ellipse:Ellipse)');\n\n    const mapRotation = curry(function mapRotation(fn, e) {\n      const {radius, angle, position} = e;\n      return fullEllipse(fn(e), radius, angle, position);\n    }, 'mapRotation(fn:Function, ellipse:Ellipse)');\n\n    const mapAngle = curry(function mapAngle(fn, e) {\n      const {radius, position, rotation} = e;\n      return fullEllipse(rotation, radius, fn(e), position);\n    }, 'mapAngle(fn:Function, ellipse:Ellipse)');\n\n    const mapRadius = curry(function mapRadius(fn, e) {\n      const {angle, position, rotation} = e;\n      return fullEllipse(rotation, fn(e), angle, position);\n    }, 'mapRadius(fn:Function, ellipse:Ellipse)');\n\n    // Output\n    return {\n      setWidthHeight,\n      setCtx,\n      fill,\n      stroke,\n      noStroke,\n      noFill,\n      dash,\n      noDash,\n      background,\n      strokeWeight,\n      polygon,\n      poly,\n      alignedPoly,\n      rect,\n      square,\n      line,\n      fullEllipse,\n      ellipse,\n      circle,\n      arc,\n      drawEllipse,\n      drawArc,\n      drawPolygon,\n      drawShape,\n      drawLine,\n      mapPolygon,\n      mapPosition,\n      mapRotation,\n      mapAngle,\n      mapRadius,\n\n      text,\n      centeredText,\n      setFont,\n      font,\n      strokeColor,\n      fillColor,\n      dashVector,\n      push,\n      pop,\n      ctx\n    };\n  }\n\n  return microcan;\n\n})));\n","const microcan = require('microcan-fp');\n\n// TODO\n// buffered calculation? fixed BPM?\n// Show indication when over 64 bytes (but don't block)\n\nconst CHAR_LIMIT = 64;\n\nconst tutorial = [\n  {\n    code: '110 * (b+1)',\n    lines: [\n      'b represents the bar number (0-15)'\n    ]\n  },\n  {\n    code: '110 + i',\n    lines: [\n      'i represents the cell index (0-127)'\n    ]\n  },\n  {\n    code: '220 + sin(t) * 440',\n    lines: [\n      't represents time in seconds since the page loaded'\n    ]\n  },\n  {\n    code: '[440,523.25,659.25,783.99][o]',\n    lines: [\n      'o represents the offset into the bar (0-3)',\n      'You can think of this as the beat',\n    ]\n  },\n  {\n    code: 'sin(t) * cos(b + t) + tan(i) * 440',\n    lines: [\n      'The whole Math library is available in the global scope'\n    ]\n  },\n  {\n    code: '[0,3,5,7].map(x => T(440, x))[(b + o) % 4]',\n    lines: [\n      'The T(base, f) function gives you notes n semitones',\n      'from the freq n. Quick shortcut to musicality!',\n    ]\n  },\n  {\n    code: '[0,3,5,7].map(x => T(440, x))[(b + o) % 4]',\n    lines: [\n      'The T(base, f) function gives you notes n semitones',\n      'from the freq n. Quick shortcut to musicality!',\n    ]\n  },\n  {\n    code: '[110, 220, 440, NaN][o]',\n    lines: [\n      'NaN and other non number values are pauses'\n    ]\n  },\n  {\n    code: '[110, 220, 440, 1/0][o]',\n    lines: [\n      'Infinity and -Infinity change the wave type'\n    ]\n  },\n  {\n    code: '[0,3,5,8].map(x=>T(110*((b+1)%4),x))[i%4]',\n    lines: [\n      'Try to keep it under 64 bytes, and Happy hacking!'\n    ]\n  },\n];\n\nconst w = 300;\nconst h = 300;\n\nconst canvas = document.getElementById('main');\nconst ctx = canvas.getContext('2d');\nconst mc = microcan(ctx, [w, h]);\nconst rect = (size, position) => mc.drawShape(mc.rect(size, position));\nconst circle = (r, position) => mc.drawEllipse(mc.circle(r, position));\n\nmc.fill([255, 255, 255, 1]);\nmc.noStroke();\n\nconst textH = Math.floor(w/20);\nctx.font = `${textH}px Courier`;\nconst textSize = ctx.measureText('Click here to start');\nctx.fillText('Click here to start', (w - textSize.width)/2, (h - textH)/2);\ncanvas.addEventListener('click', run, { once: true });\n\nfunction run() {\n  const waveTypes = [\n    'triangle',\n    'square',\n    'sawtooth',\n    'sine'\n  ];\n\n  const inputEl = document.getElementById('codeInput');\n\n  const audioCtx = new AudioContext();\n\n  const gainNode = audioCtx.createGain();\n  gainNode.connect(audioCtx.destination);\n\n  const oscillator = audioCtx.createOscillator();\n  oscillator.connect(gainNode);\n  oscillator.type = waveTypes[0];\n\n  oscillator.frequency.setValueAtTime(880.0, audioCtx.currentTime);\n  gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);\n\n  oscillator.start();\n\n  // b is the bar number\n  // i is the index of the cell\n  // t is in seconds\n  // o is the offset in the bar (the beat)\n\n  // function should return a number representing a frequency\n  // Infinities change wave type, and NaN or anything else represents no sound\n  let updateFn = new Function('b', 'i', 't', 'o', 'return ' + inputEl.value);\n\n  const setBitoFunction = code => {\n    waveTypeIndex = 0;\n    oscillator.type = waveTypes[waveTypeIndex];\n    updateFn = new Function('b', 'i', 't', 'o', 'return ' + code);\n    const escapedFn = encodeURIComponent(code);\n    window.location.hash = escapedFn;\n    inputEl.value = code;\n  }\n\n\n  const commentEl = document.querySelector('.comment');\n  let tutorialPointer = 0;\n  canvas.addEventListener('click', () => {\n    const tut = tutorial[tutorialPointer];\n    setBitoFunction(tut.code);\n    commentEl.innerHTML = tut.lines.map(line => (\n      `<div class=\"comment-line\">${line}</div>`\n    )).join('');\n    tutorialPointer = (tutorialPointer + 1) % tutorial.length;\n  });\n\n\n  // Inject math functions into global scope\n  Object.getOwnPropertyNames(Math).forEach(prop => {\n    window[prop] = Math[prop];\n  });\n\n  // Inject the tone function\n  window.T = (b, n) => b*(1.059463**n);\n\n  if (location.hash) {\n    inputEl.value = decodeURIComponent(location.hash.slice(1));\n  }\n\n  const inputClasses = inputEl.classList;\n  inputEl.addEventListener('keydown', e => {\n    if (e.key === 'Enter') {\n      setBitoFunction(e.target.value);\n    }\n\n    console.log(e.target.value.length);\n    if (e.target.value.length > CHAR_LIMIT) {\n      inputClasses.add('over-limit');\n    } else {\n      inputClasses.remove('over-limit');\n    }\n  });\n\n  const bars = 16;\n  const barSize = w / bars / 2;\n  const beatSize = barSize * 4;\n\n  let cellIndex = 0;\n  let i = 0;\n  let noNote = false;\n  let waveTypeIndex = 0;\n  let lastValue = 0;\n\n  const update = () => {\n    mc.background([0, 0, 0, 1]);\n    mc.noFill();\n    mc.stroke([0, 0, 0, 1]);\n\n    const currentBar = Math.floor(cellIndex / 4);\n    const currentBeat = cellIndex % 4;\n\n    if (i % 10 === 0) {\n      let value;\n      try {\n        value = updateFn(currentBar, cellIndex, audioCtx.currentTime, currentBeat);\n      } catch (e) {\n        value = NaN;\n      }\n\n      let skip = false;\n      if (Number.isNaN(value) || typeof value !== 'number') {\n        if (!noNote) {\n          oscillator.disconnect(gainNode);\n          noNote = true;\n        }\n        skip = true;\n      }\n\n      if (value === Infinity) {\n        waveTypeIndex = (waveTypeIndex + 1) % waveTypes.length;\n        oscillator.type = waveTypes[waveTypeIndex];\n        skip = true;\n      }\n\n      if (value === -Infinity) {\n        waveTypeIndex = waveTypeIndex - 1 === -1\n          ? waveTypes.length - 1\n          : waveTypeIndex - 1;\n        oscillator.type = waveTypes[waveTypeIndex];\n        skip = true;\n      }\n\n      if (!skip) {\n        if (noNote) {\n          oscillator.connect(gainNode);\n          noNote = false;\n        }\n\n        const freq = value;\n        oscillator.frequency.setValueAtTime(freq, audioCtx.currentTime);\n      }\n\n      lastValue = value;\n      cellIndex = (cellIndex + 1) % 64;\n    }\n\n    let orderCount = 0;\n    for (let bar = 0; bar < bars; bar++) {\n      const y = floor(bar / 2) * beatSize;\n\n      mc.push();\n      mc.noStroke();\n      if (bar === 0) {\n        mc.fill([0xff, 0x22, 0x44, 0.1]);\n      } else {\n        if (orderCount < 2) {\n          mc.fill([2555, 255, 255, 0.1]);\n        } else {\n          mc.fill([0xff, 0x22, 0x44, 0.1]);\n        }\n        orderCount = (orderCount + 1) % 4;\n      }\n      const xPos = bar % 2 === 0 ? beatSize*2 : beatSize*6;\n      rect([beatSize*4, beatSize], [xPos, y+beatSize/2])\n      mc.pop();\n\n      mc.strokeWeight(0.5);\n      for (let beat = 0; beat < 4; beat++) {\n        const x = (bar % 2 === 0)\n          ? beat * beatSize\n          : beatSize * 4 + beat * beatSize;\n        rect([beatSize, beatSize], [x+beatSize/2, y+beatSize/2]);\n\n        if (bar === currentBar && beat === currentBeat) {\n          mc.push();\n\n          if (!Number.isNaN(lastValue)) {\n            const c = lastValue > 0\n              ? [255, 255, 255, 1]\n              : [0xff, 0x22, 0x44, 1];\n            let r = beatSize / 2 / 2;\n\n            if (lastValue === Infinity) {\n              mc.noFill();\n              mc.strokeWeight(8);\n              mc.stroke(c);\n            } else if (lastValue === -Infinity) {\n              mc.noFill();\n              mc.strokeWeight(8);\n              mc.stroke(c);\n            } else {\n              mc.noStroke();\n              mc.fill(c);\n            }\n\n            circle(r, [x+beatSize/2, y+beatSize/2]);\n          }\n\n          mc.pop();\n        }\n      }\n    }\n\n    i++;\n\n    requestAnimationFrame(update);\n  }\n\n  update();\n}\n"]}